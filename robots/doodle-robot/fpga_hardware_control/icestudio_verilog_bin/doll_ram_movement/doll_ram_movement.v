// Code generated by Icestudio 0.3.1-rc
// Tue, 31 Oct 2017 11:41:45 GMT

`default_nettype none

module main #(
 parameter vef23c1 = 1_000_000,
 parameter vaa73d2 = 8'd7,
 parameter v1c8cf8 = 200_000,
 parameter vcbaf3d = 8'd10,
 parameter vc44cc5 = 8'd31,
 parameter v275834 = 80_000_000,
 parameter v6a71f3 = "romm.list",
 parameter v2227fe = "bf8.list",
 parameter ve0da89 = 8'd32,
 parameter v5a81bd = 8'd8,
 parameter v77874e = 0,
 parameter vd6e0a6 = 0,
 parameter v8a0d75 = 0,
 parameter vbfa150 = 255,
 parameter v48f44c = 255,
 parameter v5e4ec8 = 255,
 parameter v6dc2ee = 110,
 parameter vaa573c = 127
) (
 input v6c93f0,
 input va31138,
 input vclk,
 output [7:0] v197355,
 output v319115,
 output v4013e7,
 output v8357d7
);
 localparam p1 = v275834;
 localparam p3 = vef23c1;
 localparam p5 = v77874e;
 localparam p6 = vbfa150;
 localparam p7 = vaa573c;
 localparam p9 = v48f44c;
 localparam p10 = vd6e0a6;
 localparam p12 = vaa573c;
 localparam p13 = v5e4ec8;
 localparam p14 = v8a0d75;
 localparam p16 = v6dc2ee;
 localparam p18 = vcbaf3d;
 localparam p30 = v6a71f3;
 localparam p31 = ve0da89;
 localparam p33 = vc44cc5;
 localparam p36 = vaa73d2;
 localparam p39 = v1c8cf8;
 localparam p42 = v2227fe;
 localparam p43 = v5a81bd;
 wire w0;
 wire w2;
 wire w4;
 wire w8;
 wire w11;
 wire w15;
 wire w17;
 wire [0:7] w19;
 wire w20;
 wire w21;
 wire w22;
 wire w23;
 wire w24;
 wire w25;
 wire w26;
 wire w27;
 wire w28;
 wire [0:7] w29;
 wire [0:7] w32;
 wire [0:7] w34;
 wire [0:7] w35;
 wire w37;
 wire [0:7] w38;
 wire w40;
 wire [0:7] w41;
 wire [0:7] w44;
 wire w45;
 wire [0:7] w46;
 wire [0:7] w47;
 wire [0:7] w48;
 wire w49;
 wire w50;
 wire w51;
 wire w52;
 wire w53;
 wire w54;
 wire w55;
 wire w56;
 wire w57;
 wire w58;
 wire w59;
 assign v319115 = w4;
 assign v4013e7 = w8;
 assign v8357d7 = w15;
 assign w20 = v6c93f0;
 assign w21 = va31138;
 assign w23 = v6c93f0;
 assign w24 = va31138;
 assign v197355 = w38;
 assign w49 = vclk;
 assign w50 = vclk;
 assign w51 = vclk;
 assign w52 = vclk;
 assign w53 = vclk;
 assign w54 = vclk;
 assign w55 = vclk;
 assign w56 = vclk;
 assign w57 = vclk;
 assign w58 = vclk;
 assign w59 = vclk;
 assign w17 = w11;
 assign w23 = w20;
 assign w24 = w21;
 assign w28 = w11;
 assign w28 = w17;
 assign w44 = w38;
 assign w47 = w46;
 assign w48 = w46;
 assign w48 = w47;
 assign w50 = w49;
 assign w51 = w49;
 assign w51 = w50;
 assign w52 = w49;
 assign w52 = w50;
 assign w52 = w51;
 assign w53 = w49;
 assign w53 = w50;
 assign w53 = w51;
 assign w53 = w52;
 assign w54 = w49;
 assign w54 = w50;
 assign w54 = w51;
 assign w54 = w52;
 assign w54 = w53;
 assign w55 = w49;
 assign w55 = w50;
 assign w55 = w51;
 assign w55 = w52;
 assign w55 = w53;
 assign w55 = w54;
 assign w56 = w49;
 assign w56 = w50;
 assign w56 = w51;
 assign w56 = w52;
 assign w56 = w53;
 assign w56 = w54;
 assign w56 = w55;
 assign w57 = w49;
 assign w57 = w50;
 assign w57 = w51;
 assign w57 = w52;
 assign w57 = w53;
 assign w57 = w54;
 assign w57 = w55;
 assign w57 = w56;
 assign w58 = w49;
 assign w58 = w50;
 assign w58 = w51;
 assign w58 = w52;
 assign w58 = w53;
 assign w58 = w54;
 assign w58 = w55;
 assign w58 = w56;
 assign w58 = w57;
 assign w59 = w49;
 assign w59 = w50;
 assign w59 = w51;
 assign w59 = w52;
 assign w59 = w53;
 assign w59 = w54;
 assign w59 = w55;
 assign w59 = w56;
 assign w59 = w57;
 assign w59 = w58;
 v70ff7f vc69fb4 (
  .vef4cea(w0),
  .vb55943(w2),
  .vc24d9f(w11)
 );
 v3e6c24 v02bc91 (
  .v608bd9(w0)
 );
 v2003b1 #(
  .veca477(p1)
 ) v9b05a6 (
  .v22d3e8(w2),
  .vc04c2e(w49)
 );
 v2003b1 #(
  .veca477(p3)
 ) v4d1718 (
  .v22d3e8(w25),
  .vc04c2e(w50)
 );
 v589d01 #(
  .v79a04d(p5),
  .v65ff05(p6),
  .vc78345(p7)
 ) v0db72c (
  .v8aec2f(w4),
  .v4e3a3a(w28),
  .v3984b5(w46),
  .vc27e17(w51)
 );
 v589d01 #(
  .v65ff05(p9),
  .v79a04d(p10),
  .vc78345(p12)
 ) v6e6cda (
  .v8aec2f(w8),
  .v4e3a3a(w11),
  .v3984b5(w47),
  .vc27e17(w52)
 );
 v589d01 #(
  .v65ff05(p13),
  .v79a04d(p14),
  .vc78345(p16)
 ) veeeca6 (
  .v8aec2f(w15),
  .v4e3a3a(w17),
  .v3984b5(w29),
  .vc27e17(w53)
 );
 main_vb92b69 vb92b69 (
  .b(w19),
  .difference(w41),
  .a(w48)
 );
 v36d45a #(
  .vc5c8ea(p18)
 ) veec559 (
  .v7d356d(w19)
 );
 vd3ec3e v411787 (
  .v6eaeb9(w20),
  .ve542c2(w22),
  .vf569b0(w54)
 );
 vd3ec3e v3e8856 (
  .v6eaeb9(w21),
  .ve542c2(w45),
  .vf569b0(w55)
 );
 v91abf1 ve94cf3 (
  .v695853(w23),
  .vcdeb69(w24),
  .v09a613(w26)
 );
 va27ebf vd742dc (
  .v240f0a(w22),
  .v7e3c7c(w25),
  .v02803c(w27),
  .vdcf411(w37)
 );
 va627f5 ve1e535 (
  .va2d5d3(w26),
  .vc53108(w27),
  .v0973c0(w56)
 );
 v02e28e #(
  .v2acdf5(p30),
  .v816a8f(p31)
 ) ve5ffe9 (
  .v2a7461(w29),
  .v627d0b(w32),
  .v4479bb(w57)
 );
 ve729a4 v0b4b33 (
  .v2d4f84(w32),
  .v2c71e5(w34),
  .v9e2649(w40)
 );
 v36d45a #(
  .vc5c8ea(p33)
 ) v716ba8 (
  .v7d356d(w34)
 );
 ve729a4 v6b35b4 (
  .v2c71e5(w35),
  .v9e2649(w37),
  .v2d4f84(w38)
 );
 v36d45a #(
  .vc5c8ea(p36)
 ) vb9ce0a (
  .v7d356d(w35)
 );
 v2003b1 #(
  .veca477(p39)
 ) v41cd17 (
  .v22d3e8(w40),
  .vc04c2e(w58)
 );
 v7cb5aa #(
  .v29c791(p42),
  .v886789(p43)
 ) v1fa80d (
  .v2d85ba(w41),
  .ve29f0a(w44),
  .vc5a6d0(w45),
  .vb5f690(w46),
  .v69dbd9(w59)
 );
endmodule

module v70ff7f (
 input vb55943,
 input vef4cea,
 output vc24d9f
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = vef4cea;
 assign w1 = vb55943;
 assign vc24d9f = w2;
 v70ff7f_v526aa2 v526aa2 (
  .d(w0),
  .clk(w1),
  .q(w2)
 );
endmodule

module v70ff7f_v526aa2 (
 input clk,
 input d,
 output q
);
 // D flip-flop
 
 reg q = 1'b0;
 
 always @(posedge clk)
 begin
   q <= d;
 end
 
 
endmodule

module v3e6c24 (
 output v608bd9
);
 wire w0;
 assign v608bd9 = w0;
 v3e6c24_v68c173 v68c173 (
  .v(w0)
 );
endmodule

module v3e6c24_v68c173 (
 output v
);
 // Bit 1
 
 assign v = 1'b1;
endmodule

module v2003b1 #(
 parameter veca477 = 12_000_000
) (
 input vc04c2e,
 output v22d3e8
);
 localparam p2 = veca477;
 wire w0;
 wire w1;
 assign w0 = vc04c2e;
 assign v22d3e8 = w1;
 v2003b1_v3805f2 #(
  .M_in(p2)
 ) v3805f2 (
  .clk(w0),
  .clk_out(w1)
 );
endmodule

module v2003b1_v3805f2 #(
 parameter M_in = 0
) (
 input clk,
 output clk_out
);
 //-- module bomba_x1(input wire clk, output wire clk_1hz)
 
 //-- Bombeo de bits de periodo regular a X Hz (Dictado por M y N)
 
 //-- Constante para dividir y obtener una frecuencia de  X Hz
 parameter M = M_in;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 //-- Contador modulo M. tras M pulsos de reloj vuelve a 0
 always @(posedge clk)
   divcounter <= (divcounter == M - 1) ? 0 : divcounter + 1;
 
 //-- Obtener la señal de X Hz. La señal no tiene ciclo del 50%
 wire clk_doublehz;
 assign clk_doublehz = divcounter[N-1]; 
 
 //-- Usamos un biestable T para dividir entre 2 y obtener una señal
 //-- de X Hz y ciclo del 50%
 reg T = 0;
 always @(posedge clk_doublehz)
   T <= ~T;
   
 //-- Señal de salida de 1Hz y ciclo del 50%
 assign clk_out = T;
   
 //endmodule
endmodule

module v589d01 #(
 parameter v79a04d = 8'h00,
 parameter v65ff05 = 8'hFF,
 parameter vc78345 = 8'h7F
) (
 input vc27e17,
 input [0:7] v3984b5,
 input v4e3a3a,
 output v8aec2f
);
 localparam p1 = v65ff05;
 localparam p2 = v79a04d;
 localparam p3 = vc78345;
 wire w0;
 wire w4;
 wire w5;
 wire [0:7] w6;
 assign v8aec2f = w0;
 assign w4 = vc27e17;
 assign w5 = v4e3a3a;
 assign w6 = v3984b5;
 v589d01_v815aa1 #(
  .in_max_angle(p1),
  .in_min_angle(p2),
  .in_home_pos(p3)
 ) v815aa1 (
  .servo(w0),
  .clk(w4),
  .enable_mov(w5),
  .bitpos(w6)
 );
endmodule

module v589d01_v815aa1 #(
 parameter in_min_angle = 0,
 parameter in_max_angle = 0,
 parameter in_home_pos = 0
) (
 input clk,
 input [7:0] bitpos,
 input enable_mov,
 output servo
);
 //-- ServoBit-180
 
 //-- Control de un servo Futaba 3003
 //-- con un bit. Se mueve a dos posiciones
 //-- Si enable movement está 0, el servo se mantiene en la posición "home_pos"
 //-- que se corresonden con 0 / 1
 //-- El angulo total recorrido es de 180 grados
 
 //-- ENTRADAS:
 //--  clk: Señal del sistema (12Mhz)
 //--  bitpos: Bit de posicion (0 - posicion derecha, 1 - posicion izquierda)
      
 //   Bitpos 0   Bitpos 1
 //    ___          ___
 //   | o---->  <----o |
 //   |   |        |   |
 //   |___|        |___|
 
 //-- SALIDAS:
 //-- servo : Señal PWM para controlar el servo
 
 //-- Constantes para el angulo DEL servo
 localparam ANG_0   = 8'h01;
 localparam ANG_45=8'h39;
 localparam ANG_90 = 8'h5F;
 localparam ANG_135=8'hAB;
 localparam ANG_180=8'hE0;
 localparam ANG_120=8'h5F;
 
 parameter min_angle =in_min_angle;
 parameter max_angle =in_max_angle;
 parameter home_pos=in_home_pos;
 
 //-- Posicion del servo cuando el
 //-- bit de entrada es 0
 //-- La corona del servo mira a la derecha
 localparam BIT0 = min_angle;
 
 //-- Posicion el servo cuando el BIT
 //-- de entrada es 1
 //-- La corona del servo mira a la izquierda
 localparam BIT1 = max_angle;
 
 //--Posicion del servo neutra o home
 localparam BITH=home_pos;
 
 
 //-- Posicion de 8 bits del servo
 reg [7:0] pos;
 
 //-- Asignar la posicion de 8 bits
 //-- segun si lo recibido es 0 ó 1 o segun si el enable_mov está activado
 always @(posedge clk)
     begin
     if (enable_mov ==0)
         begin
            pos<=BITH;
         end   
     else if (bitpos>BIT1)
         begin
            pos<=BIT1;
         end
     else if (bitpos<BIT0)
         begin
            pos<=BIT0;
         end
     else
         begin
            pos<=bitpos;
         end
     end
 
 
 //always @(posedge clk)
 //  begin//pos <= bitpos ? BIT1 : BIT0;
 //    if (enable_mov ==0)
 //       pos<=BITH;
 //    else if (bitpos==0)
 //       pos<=BIT0;
 //    else
 //       pos<=BIT1;
 //  end  
   
 //---
 //--- ServoMotor 
 
 //-- M es el valor del divisor para
 //-- obtener tics de M / 12.0 micro-segundos
 localparam M = 94; 
 localparam N = $clog2(M);
 
 //-- Contador para generar los tics
 reg [N-1:0] divcounter = 0;
 
 //-- Flag para indicar que un tic
 //-- ha ocurrido
 reg tic = 0;
 
 //-- Generacion de los tics. Cada
 //-- M ciclos del reloj se genera 1
 always @(posedge clk)
  tic <= (divcounter == M - 2);
 
 //-- Contador modulo M
 always @(posedge clk)
  if (tic)
    divcounter <= 0;
  else
    divcounter <= divcounter + 1;
 
 //-- Contador de la posicion del 
 //-- servo
 reg [10:0] angle_counter = 0;
 
 //-- A la posicion destino hay que
 //-- sumarle un offset, correspondiente
 //-- a los 0.3ms de la posicion inicial
 wire [8:0] pose = {1'b0, pos} + 9'd46;
 
 //-- Con cada tic se incrementa el
 //-- contador de angulo del servo
 always @(posedge clk)
  if (tic)
    angle_counter <= angle_counter + 1;
 
 //-- Cuando el contador es menor que el 
 //-- valor objetivo, la señal de PWM
 //-- del servo se pone 1, y 0 en 
 //-- caso contrario
 
 reg servo;
 
 always @(posedge clk) begin
  servo <= (angle_counter < {2'b00, pose});
  end
 
 
 
 
endmodule

module v36d45a #(
 parameter vc5c8ea = 8'h00
) (
 output [7:0] v7d356d
);
 localparam p1 = vc5c8ea;
 wire [0:7] w0;
 assign v7d356d = w0;
 v36d45a_v465065 #(
  .V(p1)
 ) v465065 (
  .k(w0)
 );
endmodule

module v36d45a_v465065 #(
 parameter V = 0
) (
 output [7:0] k
);
 assign k = V;
endmodule

module vd3ec3e (
 input vf569b0,
 input v6eaeb9,
 output ve542c2
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 assign ve542c2 = w1;
 assign w2 = v6eaeb9;
 assign w3 = vf569b0;
 assign w4 = vf569b0;
 assign w4 = w3;
 v29c50d vc84384 (
  .vc947f0(w0),
  .va5ed64(w1),
  .vcf7ec2(w4)
 );
 v10d933 v37d1e8 (
  .vd4e5d7(w0),
  .v6a82dd(w2),
  .v444878(w3)
 );
endmodule

module v29c50d (
 input vcf7ec2,
 input vc947f0,
 output va5ed64
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 assign w2 = vcf7ec2;
 assign w3 = vc947f0;
 assign va5ed64 = w4;
 assign w5 = vc947f0;
 assign w5 = w3;
 v8c5d8b vf1e615 (
  .vc6ae1f(w0),
  .vd7ce19(w2),
  .v74a653(w3)
 );
 v7f3e9f v359d19 (
  .v0e28cb(w0),
  .vcbab45(w1)
 );
 vb8ea79 v5ffab8 (
  .v0e28cb(w1),
  .vcbab45(w4),
  .v3ca442(w5)
 );
endmodule

module v8c5d8b (
 input vd7ce19,
 input v74a653,
 output vc6ae1f
);
 wire w0;
 wire w1;
 wire w2;
 assign vc6ae1f = w0;
 assign w1 = v74a653;
 assign w2 = vd7ce19;
 v537d57 vf99111 (
  .vc6ae1f(w0),
  .v74a653(w1),
  .vd7ce19(w2)
 );
endmodule

module v537d57 #(
 parameter vab1fa2 = 0
) (
 input vd7ce19,
 input v74a653,
 output vc6ae1f
);
 localparam p0 = vab1fa2;
 wire w1;
 wire w2;
 wire w3;
 assign w1 = vd7ce19;
 assign w2 = v74a653;
 assign vc6ae1f = w3;
 v7bd255 #(
  .v38488b(p0)
 ) v4746ff (
  .vb55943(w1),
  .vef4cea(w2),
  .vc24d9f(w3)
 );
endmodule

module v7bd255 #(
 parameter v38488b = 0
) (
 input vb55943,
 input vef4cea,
 output vc24d9f
);
 localparam p3 = v38488b;
 wire w0;
 wire w1;
 wire w2;
 assign w0 = vef4cea;
 assign w1 = vb55943;
 assign vc24d9f = w2;
 v7bd255_v526aa2 #(
  .DINI(p3)
 ) v526aa2 (
  .d(w0),
  .clk(w1),
  .q(w2)
 );
endmodule

module v7bd255_v526aa2 #(
 parameter DINI = 0
) (
 input clk,
 input d,
 output q
);
 // D flip-flop
 // parameter DINI = 0;
 
 reg q = DINI;
 
 always @(posedge clk)
 begin
   q <= d;
 end
 
 
endmodule

module v7f3e9f (
 input v0e28cb,
 output vcbab45
);
 wire w0;
 wire w1;
 assign w0 = v0e28cb;
 assign vcbab45 = w1;
 v7f3e9f_vd54ca1 vd54ca1 (
  .a(w0),
  .c(w1)
 );
endmodule

module v7f3e9f_vd54ca1 (
 input a,
 output c
);
 //-- Puerta NOT
 
 //-- module (input wire a, output wire c);
 
 
 assign c = ~a;
 
 
 //-- endmodule
 
endmodule

module vb8ea79 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 vb8ea79_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

module vb8ea79_vf4938a (
 input a,
 input b,
 output c
);
 //-- Puerta AND
 
 //-- module and (input wire a, input wire b,
 //--             output wire c);
 
 assign c = a & b;
 
 //-- endmodule
endmodule

module v10d933 (
 input v444878,
 input v6a82dd,
 output vd4e5d7
);
 wire w0;
 wire w1;
 wire w2;
 assign vd4e5d7 = w0;
 assign w1 = v444878;
 assign w2 = v6a82dd;
 v10d933_va7041c va7041c (
  .out(w0),
  .clk(w1),
  .in(w2)
 );
endmodule

module v10d933_va7041c (
 input clk,
 input in,
 output out
);
 //-- Debouncer Circuit
 //-- It produces a stable output when the
 //-- input signal is bouncing
 
 reg btn_prev = 0;
 reg btn_out_r = 0;
 
 reg [16:0] counter = 0;
 
 
 always @(posedge clk) begin
 
   //-- If btn_prev and btn_in are differents
   if (btn_prev ^ in == 1'b1) begin
     
       //-- Reset the counter
       counter <= 0;
       
       //-- Capture the button status
       btn_prev <= in;
   end
     
   //-- If no timeout, increase the counter
   else if (counter[16] == 1'b0)
       counter <= counter + 1;
       
   else
     //-- Set the output to the stable value
     btn_out_r <= btn_prev;
 
 end
 
 assign out = btn_out_r;
 
endmodule

module v91abf1 (
 input v695853,
 input vcdeb69,
 output v09a613
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign v09a613 = w0;
 assign w2 = v695853;
 assign w3 = vcdeb69;
 v4b9553 v3d9ac5 (
  .vcbab45(w1),
  .v0e28cb(w2),
  .v3ca442(w3)
 );
 v0ec077 vfc842e (
  .v25ee73(w0),
  .v4b5bc2(w1)
 );
endmodule

module v4b9553 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v4b9553_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
 v44391c vf4114c (
 
 );
 v44391c vec8c80 (
 
 );
endmodule

module v4b9553_vf4938a (
 input a,
 input b,
 output c
);
 // NAND logic gate
 
 assign c = ~(a & b);
endmodule

module v44391c
;
 v74d69b v949c82 (
 
 );
 v74d69b ve0f5c7 (
 
 );
endmodule

module v74d69b
;
 vef9670 vdb7477 (
 
 );
 vef9670 v826842 (
 
 );
 vef9670 vdc9b55 (
 
 );
 vef9670 vea688b (
 
 );
endmodule

module vef9670
;
 v8450b0 vd09707 (
 
 );
 v8450b0 v38def6 (
 
 );
 v8450b0 v0c6e31 (
 
 );
 v8450b0 v3071e7 (
 
 );
 v8450b0 vca3873 (
 
 );
endmodule

module v8450b0
;

endmodule

module v0ec077 (
 input v4b5bc2,
 output v25ee73
);
 wire w0;
 wire w1;
 wire w2;
 assign v25ee73 = w0;
 assign w1 = v4b5bc2;
 assign w2 = v4b5bc2;
 assign w2 = w1;
 v4b9553 vdf6feb (
  .vcbab45(w0),
  .v0e28cb(w1),
  .v3ca442(w2)
 );
endmodule

module va27ebf (
 input v7e3c7c,
 input v240f0a,
 input v02803c,
 output vdcf411
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 assign vdcf411 = w0;
 assign w3 = v240f0a;
 assign w5 = v02803c;
 assign w6 = v7e3c7c;
 assign w7 = v02803c;
 assign w7 = w5;
 v493ea8 vc43974 (
  .vcbab45(w0),
  .v0e28cb(w1),
  .v3ca442(w2)
 );
 v91abf1 v2029a7 (
  .v09a613(w1),
  .v695853(w6),
  .vcdeb69(w7)
 );
 v0ec077 vee713b (
  .v25ee73(w4),
  .v4b5bc2(w5)
 );
 v91abf1 vcee616 (
  .v09a613(w2),
  .v695853(w3),
  .vcdeb69(w4)
 );
endmodule

module v493ea8 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v0ec077 v1a413a (
  .v4b5bc2(w0),
  .v25ee73(w3)
 );
 v0ec077 v6168dd (
  .v4b5bc2(w1),
  .v25ee73(w4)
 );
 v4b9553 vdb792a (
  .vcbab45(w2),
  .v0e28cb(w3),
  .v3ca442(w4)
 );
endmodule

module va627f5 (
 input v0973c0,
 input va2d5d3,
 output vc53108
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = va2d5d3;
 assign vc53108 = w1;
 assign w2 = v0973c0;
 va627f5_vc24f87 vc24f87 (
  .in(w0),
  .out(w1),
  .clk(w2)
 );
endmodule

module va627f5_vc24f87 (
 input clk,
 input in,
 output out
);
 //-- Debouncer Circuit
 //-- It produces a stable output when the
 //-- input signal is bouncing
 
 reg btn_prev = 0;
 reg btn_out_r = 0;
 
 reg [16:0] counter = 0;
 
 
 always @(posedge clk) begin
 
   //-- If btn_prev and btn_in are differents
   if (btn_prev ^ in == 1'b1) begin
     
       //-- Reset the counter
       counter <= 0;
       
       //-- Capture the button status
       btn_prev <= in;
   end
     
   //-- If no timeout, increase the counter
   else if (counter[16] == 1'b0)
       counter <= counter + 1;
       
   else
     //-- Set the output to the stable value
     btn_out_r <= btn_prev;
 
 end
 
 reg T = 0;
 
 always @(posedge btn_out_r)
   T <= ~T;
 
 
 assign out = T;
 
 
 
 
endmodule

module v02e28e #(
 parameter v2acdf5 = "",
 parameter v816a8f = 8'd32
) (
 input v4479bb,
 input [7:0] v627d0b,
 output [7:0] v2a7461
);
 localparam p1 = v2acdf5;
 localparam p3 = v816a8f;
 wire w0;
 wire [0:7] w2;
 wire [0:7] w4;
 assign w0 = v4479bb;
 assign v2a7461 = w2;
 assign w4 = v627d0b;
 v02e28e_vdb04b1 #(
  .ROMFILE(p1),
  .size(p3)
 ) vdb04b1 (
  .clk(w0),
  .D(w2),
  .A(w4)
 );
endmodule

module v02e28e_vdb04b1 #(
 parameter ROMFILE = 0,
 parameter size = 0
) (
 input clk,
 input [7:0] A,
 output [7:0] D
);
 
 //-- ROM memory
 reg [7:0] rom [0:size-1];
 
 //-- Address bus (4 bits)
 wire [7:0] A;
 
 //-- Data bus (8 bits)
 reg [7:0] D;
 
 always @(negedge clk) begin
   D <= rom[A];
 end
 
 
 //-- Memory contents read
 //-- from the ROMFILE file
 initial begin
     if (ROMFILE) $readmemh(ROMFILE, rom);
 end
 
endmodule

module ve729a4 (
 input v9e2649,
 input [7:0] v2c71e5,
 output [7:0] v2d4f84
);
 wire [0:7] w0;
 wire [0:7] w1;
 wire w2;
 wire w3;
 wire [0:7] w4;
 assign w0 = v2c71e5;
 assign w2 = v9e2649;
 assign v2d4f84 = w4;
 assign w4 = w1;
 v63d044 v51ccc4 (
  .va5cf8e(w0),
  .vc26f8e(w1),
  .v2027b7(w3)
 );
 v51424d v19ee8f (
  .v2d4f84(w1),
  .v9e2649(w2),
  .v820ff9(w3)
 );
endmodule

module v63d044 (
 input [7:0] vc26f8e,
 input [7:0] va5cf8e,
 output v2027b7
);
 wire w0;
 wire [0:7] w1;
 wire [0:7] w2;
 assign v2027b7 = w0;
 assign w1 = vc26f8e;
 assign w2 = va5cf8e;
 v63d044_v8a4e43 v8a4e43 (
  .eq(w0),
  .a(w1),
  .b(w2)
 );
endmodule

module v63d044_v8a4e43 (
 input [7:0] a,
 input [7:0] b,
 output eq
);
 
 assign eq = (a == b);
endmodule

module v51424d (
 input v9e2649,
 input v820ff9,
 output [7:0] v2d4f84
);
 wire [0:7] w0;
 wire [0:7] w1;
 wire [0:7] w2;
 wire w3;
 wire w4;
 assign v2d4f84 = w1;
 assign w3 = v9e2649;
 assign w4 = v820ff9;
 assign w1 = w0;
 v869dab v12ac6f (
  .ve0197a(w0),
  .v4493cb(w2)
 );
 v1cd4a8 v1ba6cf (
  .v63a2aa(w0),
  .v4779ac(w2),
  .ve386ea(w3),
  .vdc6593(w4)
 );
endmodule

module v869dab (
 input [7:0] ve0197a,
 output [7:0] v4493cb
);
 wire [0:7] w0;
 wire [0:7] w1;
 assign w0 = ve0197a;
 assign v4493cb = w1;
 v869dab_va480e1 va480e1 (
  .i(w0),
  .o(w1)
 );
endmodule

module v869dab_va480e1 (
 input [7:0] i,
 output [7:0] o
);
 
 assign o = i + 1;
endmodule

module v1cd4a8 (
 input ve386ea,
 input [7:0] v4779ac,
 input vdc6593,
 output [7:0] v63a2aa
);
 wire [0:7] w0;
 wire [0:7] w1;
 wire [0:3] w2;
 wire [0:3] w3;
 wire w4;
 wire w5;
 wire w6;
 wire [0:3] w7;
 wire w8;
 wire [0:3] w9;
 assign w0 = v4779ac;
 assign v63a2aa = w1;
 assign w4 = ve386ea;
 assign w5 = ve386ea;
 assign w6 = vdc6593;
 assign w8 = vdc6593;
 assign w5 = w4;
 assign w8 = w6;
 v08574d vb25dd3 (
  .v3d06d6(w0),
  .vd47139(w3),
  .va80ecf(w7)
 );
 v2e80af ved68f0 (
  .vb226fb(w1),
  .vbb1f02(w2),
  .v0064b3(w9)
 );
 ve09de3 vc51d67 (
  .ve386ea(w4),
  .v2a4745(w7),
  .v1f71b2(w8),
  .v1b9edf(w9)
 );
 ve09de3 v4891f5 (
  .v1b9edf(w2),
  .v2a4745(w3),
  .ve386ea(w5),
  .v1f71b2(w6)
 );
endmodule

module v08574d (
 input [7:0] v3d06d6,
 output [3:0] va80ecf,
 output [3:0] vd47139
);
 wire [0:7] w0;
 wire [0:3] w1;
 wire [0:3] w2;
 assign w0 = v3d06d6;
 assign va80ecf = w1;
 assign vd47139 = w2;
 v08574d_v89b409 v89b409 (
  .i(w0),
  .o1(w1),
  .o0(w2)
 );
endmodule

module v08574d_v89b409 (
 input [7:0] i,
 output [3:0] o1,
 output [3:0] o0
);
 assign {o1,o0} = i;
 
 
endmodule

module v2e80af (
 input [3:0] v0064b3,
 input [3:0] vbb1f02,
 output [7:0] vb226fb
);
 wire [0:3] w0;
 wire [0:3] w1;
 wire [0:7] w2;
 assign w0 = v0064b3;
 assign w1 = vbb1f02;
 assign vb226fb = w2;
 v2e80af_v89b409 v89b409 (
  .i1(w0),
  .i0(w1),
  .o(w2)
 );
endmodule

module v2e80af_v89b409 (
 input [3:0] i1,
 input [3:0] i0,
 output [7:0] o
);
 assign o = {i1,i0};
 
 
endmodule

module ve09de3 (
 input ve386ea,
 input [3:0] v2a4745,
 input v1f71b2,
 output [3:0] v1b9edf
);
 wire [0:3] w0;
 wire [0:3] w1;
 wire [0:1] w2;
 wire [0:1] w3;
 wire [0:1] w4;
 wire [0:1] w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 assign w0 = v2a4745;
 assign v1b9edf = w1;
 assign w6 = ve386ea;
 assign w7 = ve386ea;
 assign w8 = v1f71b2;
 assign w9 = v1f71b2;
 assign w7 = w6;
 assign w9 = w8;
 vccf42e veb43b6 (
  .v21a753(w0),
  .vf24fb3(w4),
  .v9e4a4a(w5)
 );
 ve0583d v8f490d (
  .vadf1ad(w1),
  .v0e5c05(w2),
  .vd1b8eb(w3)
 );
 vfd2df2 ve1c83e (
  .v45c976(w3),
  .vaf74f8(w5),
  .ve386ea(w6),
  .v2ab36b(w9)
 );
 vfd2df2 v5fea58 (
  .v45c976(w2),
  .vaf74f8(w4),
  .ve386ea(w7),
  .v2ab36b(w8)
 );
endmodule

module vccf42e (
 input [3:0] v21a753,
 output [1:0] v9e4a4a,
 output [1:0] vf24fb3
);
 wire [0:3] w0;
 wire [0:1] w1;
 wire [0:1] w2;
 assign w0 = v21a753;
 assign v9e4a4a = w1;
 assign vf24fb3 = w2;
 vccf42e_v89b409 v89b409 (
  .i(w0),
  .o1(w1),
  .o0(w2)
 );
endmodule

module vccf42e_v89b409 (
 input [3:0] i,
 output [1:0] o1,
 output [1:0] o0
);
 assign {o1,o0} = i;
 
 
endmodule

module ve0583d (
 input [1:0] vd1b8eb,
 input [1:0] v0e5c05,
 output [3:0] vadf1ad
);
 wire [0:1] w0;
 wire [0:1] w1;
 wire [0:3] w2;
 assign w0 = vd1b8eb;
 assign w1 = v0e5c05;
 assign vadf1ad = w2;
 ve0583d_v89b409 v89b409 (
  .i1(w0),
  .i0(w1),
  .o(w2)
 );
endmodule

module ve0583d_v89b409 (
 input [1:0] i1,
 input [1:0] i0,
 output [3:0] o
);
 assign o = {i1,i0};
 
 
endmodule

module vfd2df2 (
 input ve386ea,
 input [1:0] vaf74f8,
 input v2ab36b,
 output [1:0] v45c976
);
 wire [0:1] w0;
 wire [0:1] w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 assign w0 = vaf74f8;
 assign v45c976 = w1;
 assign w3 = ve386ea;
 assign w5 = ve386ea;
 assign w7 = v2ab36b;
 assign w8 = v2ab36b;
 assign w5 = w3;
 assign w8 = w7;
 v1ed638 v78a213 (
  .vc9d8af(w0),
  .v26347c(w2),
  .vc266df(w6)
 );
 vbb32a6 v16a56a (
  .v16058a(w1),
  .v4d8fdf(w4),
  .v29d743(w9)
 );
 v4e67f8 v29fe78 (
  .vc3da60(w2),
  .v666059(w3),
  .vc5e4b6(w8),
  .v71f9a8(w9)
 );
 v4e67f8 v471d0e (
  .v71f9a8(w4),
  .v666059(w5),
  .vc3da60(w6),
  .vc5e4b6(w7)
 );
endmodule

module v1ed638 (
 input [1:0] vc9d8af,
 output v26347c,
 output vc266df
);
 wire [0:1] w0;
 wire w1;
 wire w2;
 assign w0 = vc9d8af;
 assign v26347c = w1;
 assign vc266df = w2;
 v1ed638_v89b409 v89b409 (
  .i(w0),
  .o1(w1),
  .o0(w2)
 );
endmodule

module v1ed638_v89b409 (
 input [1:0] i,
 output o1,
 output o0
);
 assign {o1,o0} = i;
 
 
endmodule

module vbb32a6 (
 input v29d743,
 input v4d8fdf,
 output [1:0] v16058a
);
 wire w0;
 wire w1;
 wire [0:1] w2;
 assign w0 = v29d743;
 assign w1 = v4d8fdf;
 assign v16058a = w2;
 vbb32a6_v89b409 v89b409 (
  .i1(w0),
  .i0(w1),
  .o(w2)
 );
endmodule

module vbb32a6_v89b409 (
 input i1,
 input i0,
 output [1:0] o
);
 assign o = {i1,i0};
 
 
endmodule

module v4e67f8 #(
 parameter v467c37 = 0
) (
 input v666059,
 input vc3da60,
 input vc5e4b6,
 output v71f9a8
);
 localparam p4 = v467c37;
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign v71f9a8 = w0;
 assign w1 = vc3da60;
 assign w2 = vc5e4b6;
 assign w3 = v666059;
 vc1a6d3 #(
  .vd93afa(p4)
 ) v3e430e (
  .vef02d7(w0),
  .vc96ba8(w1),
  .ve64610(w2),
  .va44fe0(w3)
 );
endmodule

module vc1a6d3 #(
 parameter vd93afa = 0
) (
 input va44fe0,
 input vc96ba8,
 input ve64610,
 output vef02d7
);
 localparam p1 = vd93afa;
 localparam p7 = vd93afa;
 wire w0;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 assign w0 = va44fe0;
 assign vef02d7 = w2;
 assign w4 = vc96ba8;
 assign w5 = ve64610;
 v785abe #(
  .v38488b(p1)
 ) vac2e90 (
  .vb55943(w0),
  .vc24d9f(w2),
  .vef4cea(w3)
 );
 v818f8f v8b5217 (
  .vdcf411(w3),
  .v7e3c7c(w4),
  .v02803c(w5),
  .v240f0a(w6)
 );
 v2eee9f #(
  .va5aba0(p7)
 ) v23e484 (
  .v9b792b(w6)
 );
endmodule

module v785abe #(
 parameter v38488b = 0
) (
 input vb55943,
 input vef4cea,
 output vc24d9f
);
 localparam p3 = v38488b;
 wire w0;
 wire w1;
 wire w2;
 assign w0 = vef4cea;
 assign w1 = vb55943;
 assign vc24d9f = w2;
 v785abe_v526aa2 #(
  .DINI(p3)
 ) v526aa2 (
  .d(w0),
  .clk(w1),
  .q(w2)
 );
endmodule

module v785abe_v526aa2 #(
 parameter DINI = 0
) (
 input clk,
 input d,
 output q
);
 // D flip-flop
 // parameter DINI = 0;
 
 reg q = DINI;
 
 always @(posedge clk)
 begin
   q <= d;
 end
 
 
endmodule

module v818f8f (
 input v7e3c7c,
 input v240f0a,
 input v02803c,
 output vdcf411
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 assign vdcf411 = w0;
 assign w4 = v02803c;
 assign w5 = v02803c;
 assign w6 = v240f0a;
 assign w7 = v7e3c7c;
 assign w5 = w4;
 v32200d v372b35 (
  .vcbab45(w3),
  .v0e28cb(w4)
 );
 v11a6f4 v832cd2 (
  .vcbab45(w1),
  .v0e28cb(w3),
  .v3ca442(w7)
 );
 v2fa1b5 v56cee0 (
  .vcbab45(w0),
  .v0e28cb(w1),
  .v3ca442(w2)
 );
 v11a6f4 va685a3 (
  .vcbab45(w2),
  .v3ca442(w5),
  .v0e28cb(w6)
 );
endmodule

module v32200d (
 input v0e28cb,
 output vcbab45
);
 wire w0;
 wire w1;
 assign w0 = v0e28cb;
 assign vcbab45 = w1;
 v32200d_vd54ca1 vd54ca1 (
  .a(w0),
  .c(w1)
 );
endmodule

module v32200d_vd54ca1 (
 input a,
 output c
);
 // NOT logic gate
 
 assign c = ~ a;
endmodule

module v11a6f4 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v11a6f4_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

module v11a6f4_vf4938a (
 input a,
 input b,
 output c
);
 // AND logic gate
 
 assign c = a & b;
endmodule

module v2fa1b5 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v2fa1b5_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

module v2fa1b5_vf4938a (
 input a,
 input b,
 output c
);
 // OR logic gate
 
 assign c = a | b;
endmodule

module v2eee9f #(
 parameter va5aba0 = 0
) (
 output v9b792b
);
 localparam p0 = va5aba0;
 wire w1;
 assign v9b792b = w1;
 v2eee9f_v48515b #(
  .V(p0)
 ) v48515b (
  .k(w1)
 );
endmodule

module v2eee9f_v48515b #(
 parameter V = 0
) (
 output k
);
 assign k = V;
 
endmodule

module v7cb5aa #(
 parameter v29c791 = "",
 parameter v886789 = 8'd32
) (
 input v69dbd9,
 input [7:0] v2d85ba,
 input [7:0] ve29f0a,
 input vc5a6d0,
 output [7:0] vb5f690
);
 localparam p0 = v29c791;
 localparam p6 = v886789;
 wire w1;
 wire [0:7] w2;
 wire w3;
 wire [0:7] w4;
 wire [0:7] w5;
 assign w1 = v69dbd9;
 assign w2 = v2d85ba;
 assign w3 = vc5a6d0;
 assign vb5f690 = w4;
 assign w5 = ve29f0a;
 v7cb5aa_v3d99ed #(
  .RAMFILE(p0),
  .size(p6)
 ) v3d99ed (
  .clk(w1),
  .data_in(w2),
  .rw(w3),
  .data(w4),
  .addr(w5)
 );
endmodule

module v7cb5aa_v3d99ed #(
 parameter RAMFILE = 0,
 parameter size = 0
) (
 input clk,
 input [7:0] data_in,
 input [7:0] addr,
 input rw,
 output [7:0] data
);
 //RAM FILE 16x8 A RAM with 16 positions of 8 bits
 
 //-- Memoria
 reg [7:0] ram [0:size-1];
 wire [7:0] addr;
 wire rw;
 wire [7:0] data_in;
 reg [7:0] data;
 
 always @(posedge clk) begin
     
     if (rw==0)//Read mode
         data <= ram[addr];
     else//Write mode
         ram[addr]<=data_in;
 end
 
 //-- Inicializacion de la memoria. 
   initial begin
     if (RAMFILE) $readmemh(RAMFILE, ram);
    end
 
endmodule

module main_vb92b69 (
 input [7:0] a,
 input [7:0] b,
 output [7:0] difference
);
 reg [7:0] ab;
 
 always@(*)
     begin
         ab<=a-b;
     end
 assign difference=ab;
endmodule
