# -*- coding: utf-8 -*-

'''

Python says

A program that generates Verilog code and verify, build and load the code using APIO

Made by Juli√°n Caro Linares

jcarolinares@gmail.com

CC-BY-SA

'''

#Python 3

#Libraries
import os
import subprocess
import time

#import apio #FIXME right now it's only work with Python 2, waiting for the fpga community mailing link response
#from apio.managers.scons import SCons
#from apio.managers.project import Project

#Template generator library
import em

#Variables
path="." #By the time the path it must be the root of the project. Apio needs that (Scons().verify doesn't have a path parameter)
fpgaboard="icezum"
pythonsays_memo="[PYTHON SAYS]: " #Keyword that defines the outputs generated by pythonsays


#Main execution
def main():
    file_name="counter.v"

    file = open(file_name, 'w')

    m_list=[5,10,15,20,25,30]
    for m in m_list:
        print("Creando circuito con M: ",m)
        file = open(file_name, 'w')
        interpreter = em.Interpreter(output=file ,argv=str(m))

        # Process an actual file (and output to stdout):
        interpreter.file(open('counter.em'))
        interpreter.shutdown() # this is important; see below

        subprocess.call('apio "verify"' ,shell=True)
        subprocess.call('apio "build"' ,shell=True)
        subprocess.call('apio "upload"' ,shell=True)
        time.sleep(10);


if __name__ == "__main__":
 main()
